/*
 * Mock Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using NPaperless.Services.Attributes;
using NPaperless.Services.DTOs;

namespace NPaperless.Services.Controllers
{
    [ApiController]
    public class DocumentTypesApiController : ControllerBase
    {
        private readonly ILogger<DocumentTypesApiController> _logger;

        public DocumentTypesApiController(ILogger<DocumentTypesApiController> logger)
        {
            _logger = logger;
        }

        // POST: api/document_types
        [HttpPost]
        [Route("/api/document_types")]
        public virtual IActionResult CreateDocumentType([FromBody]NewDocumentTypeDTO newDocumentType)
        {
            _logger.LogInformation("Creating a new document type: {@NewDocumentTypeDTO}", newDocumentType);
            // Your code to handle the creation
            return StatusCode(200);
        }

        // DELETE: api/document_types/{id}
        [HttpDelete]
        [Route("/api/document_types/{id}")]
        public virtual IActionResult DeleteDocumentType([FromRoute][Required]int id)
        {
            _logger.LogInformation("Deleting document type with ID: {Id}", id);
            // Your code to handle the deletion
            return StatusCode(200);
        }

        // GET: api/document_types
        [HttpGet]
        [Route("/api/document_types")]
        public virtual IActionResult GetDocumentTypes()
        {
            _logger.LogInformation("Getting all document types.");
            // Your code to retrieve document types
            return StatusCode(200);
        }

        // PUT: api/document_types/{id}
        [HttpPut]
        [Route("/api/document_types/{id}")]
        public virtual IActionResult UpdateDocumentType([FromRoute][Required]int id, [FromBody]DocumentTypeDTO documentType)
        {
            _logger.LogInformation("Updating document type with ID: {Id}, Data: {@DocumentType}", id, documentType);
            // Your code to handle the update
            return StatusCode(200);
        }
    }
}